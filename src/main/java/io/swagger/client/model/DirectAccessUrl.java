/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * DirectAccessUrl
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-04T08:19:38.842344610Z[GMT]")

public class DirectAccessUrl {
  @SerializedName("contentUrl")
  private String contentUrl = null;

  @SerializedName("attachment")
  private Boolean attachment = null;

  @SerializedName("expiresAt")
  private OffsetDateTime expiresAt = null;

  public DirectAccessUrl contentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

   /**
   * The direct access URL of a binary content
   * @return contentUrl
  **/
  @Schema(required = true, description = "The direct access URL of a binary content")
  public String getContentUrl() {
    return contentUrl;
  }

  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }

  public DirectAccessUrl attachment(Boolean attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Flag to control the download method, **true** for attachment URL, **false** for embedded URL
   * @return attachment
  **/
  @Schema(description = "Flag to control the download method, **true** for attachment URL, **false** for embedded URL")
  public Boolean isAttachment() {
    return attachment;
  }

  public void setAttachment(Boolean attachment) {
    this.attachment = attachment;
  }

  public DirectAccessUrl expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The direct access URL would become invalid when the expiry date is reached
   * @return expiresAt
  **/
  @Schema(description = "The direct access URL would become invalid when the expiry date is reached")
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectAccessUrl directAccessUrl = (DirectAccessUrl) o;
    return Objects.equals(this.contentUrl, directAccessUrl.contentUrl) &&
        Objects.equals(this.attachment, directAccessUrl.attachment) &&
        Objects.equals(this.expiresAt, directAccessUrl.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentUrl, attachment, expiresAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectAccessUrl {\n");
    
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
