/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ActionParameterDefinition;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ActionDefinition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-04T08:19:38.842344610Z[GMT]")

public class ActionDefinition {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("applicableTypes")
  private List<String> applicableTypes = new ArrayList<String>();

  @SerializedName("trackStatus")
  private Boolean trackStatus = null;

  @SerializedName("parameterDefinitions")
  private List<ActionParameterDefinition> parameterDefinitions = null;

  public ActionDefinition id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the action definition â€” used for example when executing an action
   * @return id
  **/
  @Schema(required = true, description = "Identifier of the action definition â€” used for example when executing an action")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ActionDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * name of the action definition, e.g. \&quot;move\&quot;
   * @return name
  **/
  @Schema(description = "name of the action definition, e.g. \"move\"")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ActionDefinition title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of the action definition, e.g. \&quot;Move\&quot;
   * @return title
  **/
  @Schema(description = "title of the action definition, e.g. \"Move\"")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ActionDefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * describes the action definition, e.g. \&quot;This will move the matched item to another space.\&quot;
   * @return description
  **/
  @Schema(description = "describes the action definition, e.g. \"This will move the matched item to another space.\"")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ActionDefinition applicableTypes(List<String> applicableTypes) {
    this.applicableTypes = applicableTypes;
    return this;
  }

  public ActionDefinition addApplicableTypesItem(String applicableTypesItem) {
    this.applicableTypes.add(applicableTypesItem);
    return this;
  }

   /**
   * QNames of the types this action applies to
   * @return applicableTypes
  **/
  @Schema(required = true, description = "QNames of the types this action applies to")
  public List<String> getApplicableTypes() {
    return applicableTypes;
  }

  public void setApplicableTypes(List<String> applicableTypes) {
    this.applicableTypes = applicableTypes;
  }

  public ActionDefinition trackStatus(Boolean trackStatus) {
    this.trackStatus = trackStatus;
    return this;
  }

   /**
   * whether the basic action definition supports action tracking or not
   * @return trackStatus
  **/
  @Schema(required = true, description = "whether the basic action definition supports action tracking or not")
  public Boolean isTrackStatus() {
    return trackStatus;
  }

  public void setTrackStatus(Boolean trackStatus) {
    this.trackStatus = trackStatus;
  }

  public ActionDefinition parameterDefinitions(List<ActionParameterDefinition> parameterDefinitions) {
    this.parameterDefinitions = parameterDefinitions;
    return this;
  }

  public ActionDefinition addParameterDefinitionsItem(ActionParameterDefinition parameterDefinitionsItem) {
    if (this.parameterDefinitions == null) {
      this.parameterDefinitions = new ArrayList<ActionParameterDefinition>();
    }
    this.parameterDefinitions.add(parameterDefinitionsItem);
    return this;
  }

   /**
   * Get parameterDefinitions
   * @return parameterDefinitions
  **/
  @Schema(description = "")
  public List<ActionParameterDefinition> getParameterDefinitions() {
    return parameterDefinitions;
  }

  public void setParameterDefinitions(List<ActionParameterDefinition> parameterDefinitions) {
    this.parameterDefinitions = parameterDefinitions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionDefinition actionDefinition = (ActionDefinition) o;
    return Objects.equals(this.id, actionDefinition.id) &&
        Objects.equals(this.name, actionDefinition.name) &&
        Objects.equals(this.title, actionDefinition.title) &&
        Objects.equals(this.description, actionDefinition.description) &&
        Objects.equals(this.applicableTypes, actionDefinition.applicableTypes) &&
        Objects.equals(this.trackStatus, actionDefinition.trackStatus) &&
        Objects.equals(this.parameterDefinitions, actionDefinition.parameterDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, title, description, applicableTypes, trackStatus, parameterDefinitions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionDefinition {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    applicableTypes: ").append(toIndentedString(applicableTypes)).append("\n");
    sb.append("    trackStatus: ").append(toIndentedString(trackStatus)).append("\n");
    sb.append("    parameterDefinitions: ").append(toIndentedString(parameterDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
