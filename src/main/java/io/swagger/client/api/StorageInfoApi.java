/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArchiveContentRequest;
import io.swagger.client.model.ContentStorageInfo;
import io.swagger.client.model.Error;
import io.swagger.client.model.RestoreArchivedContentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageInfoApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public StorageInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageInfoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getStorageProperties
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragePropertiesCall(String nodeId, String contentPropName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragePropertiesValidateBeforeCall(String nodeId, String contentPropName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getStorageProperties(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling getStorageProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = getStoragePropertiesCall(nodeId, contentPropName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve storage properties for given content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @return ContentStorageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStorageInfo getStorageProperties(String nodeId, String contentPropName) throws ApiException {
        ApiResponse<ContentStorageInfo> resp = getStoragePropertiesWithHttpInfo(nodeId, contentPropName);
        return resp.getData();
    }

    /**
     * Retrieve storage properties for given content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @return ApiResponse&lt;ContentStorageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStorageInfo> getStoragePropertiesWithHttpInfo(String nodeId, String contentPropName) throws ApiException {
        com.squareup.okhttp.Call call = getStoragePropertiesValidateBeforeCall(nodeId, contentPropName, null, null);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve storage properties for given content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragePropertiesAsync(String nodeId, String contentPropName, final ApiCallback<ContentStorageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragePropertiesValidateBeforeCall(nodeId, contentPropName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionStorageProperties
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionStoragePropertiesCall(String nodeId, String versionId, String contentPropName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", apiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionStoragePropertiesValidateBeforeCall(String nodeId, String versionId, String contentPropName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getVersionStorageProperties(Async)");
        }
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getVersionStorageProperties(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling getVersionStorageProperties(Async)");
        }
        
        com.squareup.okhttp.Call call = getVersionStoragePropertiesCall(nodeId, versionId, contentPropName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve storage properties for given version content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @return ContentStorageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentStorageInfo getVersionStorageProperties(String nodeId, String versionId, String contentPropName) throws ApiException {
        ApiResponse<ContentStorageInfo> resp = getVersionStoragePropertiesWithHttpInfo(nodeId, versionId, contentPropName);
        return resp.getData();
    }

    /**
     * Retrieve storage properties for given version content
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @return ApiResponse&lt;ContentStorageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentStorageInfo> getVersionStoragePropertiesWithHttpInfo(String nodeId, String versionId, String contentPropName) throws ApiException {
        com.squareup.okhttp.Call call = getVersionStoragePropertiesValidateBeforeCall(nodeId, versionId, contentPropName, null, null);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve storage properties for given version content (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Gets storage properties for given version content.  Please find below sample responses for this endpoint when Alfresco Content Connector for AWS S3 is installed.  Similar responses will be returned when Alfresco Content Connector for Azure Blob is installed, albeit it with  some native storage properties with x-ms- prefix instead of x-amz- prefix.  Standard storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Intelligent tiering storage class: &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;INTELLIGENT_TIERING\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (no restore request ongoing or submitted): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request ongoing, not completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;true\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;true\\\&quot;\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;true\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; Glacier archive storage class (restore request completed): &#x60;&#x60;&#x60;json {   \&quot;entry\&quot;: {     \&quot;storageProperties\&quot;: {       \&quot;x-alf-archive-restore-in-progress\&quot;: \&quot;false\&quot;,       \&quot;x-amz-restore\&quot;: \&quot;ongoing-request&#x3D;\\\&quot;false\\\&quot;, expiry-date&#x3D;\\\&quot;Fri Nov 26 01:00:00 CET 2021\\\&quot;\&quot;,       \&quot;x-alf-archive-restore-expiry\&quot;: \&quot;2021-11-26T00:00:00.000Z\&quot;,       \&quot;x-alf-archived\&quot;: \&quot;false\&quot;,       \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;     },     \&quot;id\&quot;: \&quot;cm:content\&quot;   } } &#x60;&#x60;&#x60; 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionStoragePropertiesAsync(String nodeId, String versionId, String contentPropName, final ApiCallback<ContentStorageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionStoragePropertiesValidateBeforeCall(nodeId, versionId, contentPropName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentStorageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestArchiveContent
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestArchiveContentCall(String nodeId, String contentPropName, ArchiveContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}/archive"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestArchiveContentValidateBeforeCall(String nodeId, String contentPropName, ArchiveContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestArchiveContent(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestArchiveContent(Async)");
        }
        
        com.squareup.okhttp.Call call = requestArchiveContentCall(nodeId, contentPropName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request to send given content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestArchiveContent(String nodeId, String contentPropName, ArchiveContentRequest body) throws ApiException {
        requestArchiveContentWithHttpInfo(nodeId, contentPropName, body);
    }

    /**
     * Request to send given content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestArchiveContentWithHttpInfo(String nodeId, String contentPropName, ArchiveContentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = requestArchiveContentValidateBeforeCall(nodeId, contentPropName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request to send given content to archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestArchiveContentAsync(String nodeId, String contentPropName, ArchiveContentRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestArchiveContentValidateBeforeCall(nodeId, contentPropName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for requestArchiveVersionContent
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestArchiveVersionContentCall(String nodeId, String versionId, String contentPropName, ArchiveContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", apiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestArchiveVersionContentValidateBeforeCall(String nodeId, String versionId, String contentPropName, ArchiveContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestArchiveVersionContent(Async)");
        }
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestArchiveVersionContent(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestArchiveVersionContent(Async)");
        }
        
        com.squareup.okhttp.Call call = requestArchiveVersionContentCall(nodeId, versionId, contentPropName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request to send given version content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestArchiveVersionContent(String nodeId, String versionId, String contentPropName, ArchiveContentRequest body) throws ApiException {
        requestArchiveVersionContentWithHttpInfo(nodeId, versionId, contentPropName, body);
    }

    /**
     * Request to send given version content to archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestArchiveVersionContentWithHttpInfo(String nodeId, String versionId, String contentPropName, ArchiveContentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = requestArchiveVersionContentValidateBeforeCall(nodeId, versionId, contentPropName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request to send given version content to archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to send given version content to archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Archive content request parameters - currently not supported by any Alfresco Cloud Connector. Body is not mandatory. Request body example: &#x60;&#x60;&#x60;JSON {   \&quot;archiveParams\&quot;: {                 \&quot;x-amz-storage-class\&quot;: \&quot;GLACIER\&quot;               } } &#x60;&#x60;&#x60;  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestArchiveVersionContentAsync(String nodeId, String versionId, String contentPropName, ArchiveContentRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestArchiveVersionContentValidateBeforeCall(nodeId, versionId, contentPropName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for requestRestoreContentFromArchive
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestRestoreContentFromArchiveCall(String nodeId, String contentPropName, RestoreArchivedContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/storage-info/{contentPropName}/archive-restore"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestRestoreContentFromArchiveValidateBeforeCall(String nodeId, String contentPropName, RestoreArchivedContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestRestoreContentFromArchive(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestRestoreContentFromArchive(Async)");
        }
        
        com.squareup.okhttp.Call call = requestRestoreContentFromArchiveCall(nodeId, contentPropName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request to restore given content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestRestoreContentFromArchive(String nodeId, String contentPropName, RestoreArchivedContentRequest body) throws ApiException {
        requestRestoreContentFromArchiveWithHttpInfo(nodeId, contentPropName, body);
    }

    /**
     * Request to restore given content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestRestoreContentFromArchiveWithHttpInfo(String nodeId, String contentPropName, RestoreArchivedContentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = requestRestoreContentFromArchiveValidateBeforeCall(nodeId, contentPropName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request to restore given content from archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestRestoreContentFromArchiveAsync(String nodeId, String contentPropName, RestoreArchivedContentRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestRestoreContentFromArchiveValidateBeforeCall(nodeId, contentPropName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for requestRestoreVersionContentFromArchive
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestRestoreVersionContentFromArchiveCall(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/nodes/{nodeId}/versions/{versionId}/storage-info/{contentPropName}/archive-restore"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", apiClient.escapeString(versionId.toString()))
            .replaceAll("\\{" + "contentPropName" + "\\}", apiClient.escapeString(contentPropName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestRestoreVersionContentFromArchiveValidateBeforeCall(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        // verify the required parameter 'contentPropName' is set
        if (contentPropName == null) {
            throw new ApiException("Missing the required parameter 'contentPropName' when calling requestRestoreVersionContentFromArchive(Async)");
        }
        
        com.squareup.okhttp.Call call = requestRestoreVersionContentFromArchiveCall(nodeId, versionId, contentPropName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request to restore given version content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestRestoreVersionContentFromArchive(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest body) throws ApiException {
        requestRestoreVersionContentFromArchiveWithHttpInfo(nodeId, versionId, contentPropName, body);
    }

    /**
     * Request to restore given version content from archive
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestRestoreVersionContentFromArchiveWithHttpInfo(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest body) throws ApiException {
        com.squareup.okhttp.Call call = requestRestoreVersionContentFromArchiveValidateBeforeCall(nodeId, versionId, contentPropName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request to restore given version content from archive (asynchronously)
     * **Note:** this endpoint is available in Alfresco 7.2.0 and newer versions. It also requires at least one specific implementation of underlying functionality in Cloud Connector(s).  Request to restore given version content from archive. 
     * @param nodeId The identifier of a node. (required)
     * @param versionId The identifier of a version, ie. version label, within the version history of a node. (required)
     * @param contentPropName The namespace-prefix property name of content. Delimiter between namespace-prefix and property name can be either colon (&#x27;:&#x27;) or underscore (&#x27;_&#x27;) character (e.g., &#x27;cm:content&#x27; or &#x27;cm_content&#x27;).  (required)
     * @param body Restore content from archive request parameters. At the moment there is one parameter being supported which is restore priority. &#x27;High&#x27; restore priority translates to &#x27;Expedited&#x27; Glacier restore tier in AWS S3 and &#x27;High&#x27; rehydrate priority in Azure Blob. &#x27;Standard&#x27; restore priority translates to &#x27;Standard&#x27; Glacier restore tier in AWS S3 and &#x27;Standard&#x27; rehydrate priority in Azure Blob. Body is not mandatory. High restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;High\&quot; } &#x60;&#x60;&#x60; Standard restore priority request body example: &#x60;&#x60;&#x60;JSON {   \&quot;restorePriority\&quot;: \&quot;Standard\&quot; } &#x60;&#x60;&#x60;  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestRestoreVersionContentFromArchiveAsync(String nodeId, String versionId, String contentPropName, RestoreArchivedContentRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestRestoreVersionContentFromArchiveValidateBeforeCall(nodeId, versionId, contentPropName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
