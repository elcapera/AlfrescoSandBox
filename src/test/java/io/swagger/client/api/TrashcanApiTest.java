/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DeletedNodeBodyRestore;
import io.swagger.client.model.DeletedNodeEntry;
import io.swagger.client.model.DeletedNodesPaging;
import io.swagger.client.model.DirectAccessUrlBodyCreate;
import io.swagger.client.model.DirectAccessUrlEntry;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.NodeEntry;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RenditionEntry;
import io.swagger.client.model.RenditionPaging;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TrashcanApi
 */
@Ignore
public class TrashcanApiTest {

    private final TrashcanApi api = new TrashcanApi();

    /**
     * Permanently delete a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Permanently deletes the deleted node **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDeletedNodeTest() throws Exception {
        String nodeId = null;
        api.deleteDeletedNode(nodeId);

        // TODO: test validations
    }
    /**
     * Get rendition information for a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getArchivedNodeRenditionTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        RenditionEntry response = api.getArchivedNodeRendition(nodeId, renditionId);

        // TODO: test validations
    }
    /**
     * Get rendition content of a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getArchivedNodeRenditionContentTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        String range = null;
        Boolean placeholder = null;
        File response = api.getArchivedNodeRenditionContent(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder);

        // TODO: test validations
    }
    /**
     * Get a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the specific deleted node **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeletedNodeTest() throws Exception {
        String nodeId = null;
        List<String> include = null;
        DeletedNodeEntry response = api.getDeletedNode(nodeId, include);

        // TODO: test validations
    }
    /**
     * Get deleted node content
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the deleted node with identifier **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeletedNodeContentTest() throws Exception {
        String nodeId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        String range = null;
        File response = api.getDeletedNodeContent(nodeId, attachment, ifModifiedSince, range);

        // TODO: test validations
    }
    /**
     * List renditions for a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.  EachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#x27;CREATED&#x27;) &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDeletedNodeRenditionsTest() throws Exception {
        String nodeId = null;
        String where = null;
        RenditionPaging response = api.listDeletedNodeRenditions(nodeId, where);

        // TODO: test validations
    }
    /**
     * List deleted nodes
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of deleted nodes for the current user.  If the current user is an administrator deleted nodes for all users will be returned.  The list of deleted nodes will be ordered with the most recently deleted node at the top of the list. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listDeletedNodesTest() throws Exception {
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> include = null;
        DeletedNodesPaging response = api.listDeletedNodes(skipCount, maxItems, include);

        // TODO: test validations
    }
    /**
     * Generate a direct access content URL
     *
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestArchivedNodeRenditionDirectAccessUrlTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        DirectAccessUrlBodyCreate body = null;
        DirectAccessUrlEntry response = api.requestArchivedNodeRenditionDirectAccessUrl(nodeId, renditionId, body);

        // TODO: test validations
    }
    /**
     * Generate a direct access content URL
     *
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestDeletedNodeDirectAccessUrlTest() throws Exception {
        String nodeId = null;
        DirectAccessUrlBodyCreate body = null;
        DirectAccessUrlEntry response = api.requestDeletedNodeDirectAccessUrl(nodeId, body);

        // TODO: test validations
    }
    /**
     * Restore a deleted node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to restore the deleted node **nodeId** to its original location or to a new location.  If the node is successfully restored to its former primary parent, then only the primary child association will be restored, including recursively for any primary children. It should be noted that no other secondary child associations or peer associations will be restored, for any of the nodes within the primary parent-child hierarchy of restored nodes, irrespective of whether these associations were to nodes within or outside of the restored hierarchy.  Also, any previously shared link will not be restored since it is deleted at the time of delete of each node. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restoreDeletedNodeTest() throws Exception {
        String nodeId = null;
        DeletedNodeBodyRestore body = null;
        List<String> fields = null;
        NodeEntry response = api.restoreDeletedNode(nodeId, body, fields);

        // TODO: test validations
    }
}
