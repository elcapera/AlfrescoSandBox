/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DirectAccessUrlBodyCreate;
import io.swagger.client.model.DirectAccessUrlEntry;
import io.swagger.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RenditionBodyCreate;
import io.swagger.client.model.RenditionEntry;
import io.swagger.client.model.RenditionPaging;
import io.swagger.client.model.RevertBody;
import io.swagger.client.model.VersionEntry;
import io.swagger.client.model.VersionPaging;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for VersionsApi
 */
@Ignore
public class VersionsApiTest {

    private final VersionsApi api = new VersionsApi();

    /**
     * Create rendition for a file version
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.  The version rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;   Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {       \&quot;id\&quot;: \&quot;doclib\&quot;   },   {       \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createVersionRenditionTest() throws Exception {
        RenditionBodyCreate body = null;
        String nodeId = null;
        String versionId = null;
        api.createVersionRendition(body, nodeId, versionId);

        // TODO: test validations
    }
    /**
     * Delete a version
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Delete the version identified by **versionId** and **nodeId*.  If the version is successfully deleted then the content and metadata for that versioned node will be deleted and will no longer appear in the version history. This operation cannot be undone.  If the most recent version is deleted the live node will revert to the next most recent version.  We currently do not allow the last version to be deleted. If you wish to clear the history then you can remove the \&quot;cm:versionable\&quot; aspect (via update node) which will also disable versioning. In this case, you can re-enable versioning by adding back the \&quot;cm:versionable\&quot; aspect or using the version params (majorVersion and comment) on a subsequent file content update. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteVersionTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        api.deleteVersion(nodeId, versionId);

        // TODO: test validations
    }
    /**
     * Delete rendition for a version
     *
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition for **renditionId** of version **versionId** of **nodeId**.  If the rendition is successfully deleted then the content  for that rendition node will be cleared. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteVersionRenditionTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        String renditionId = null;
        api.deleteVersionRendition(nodeId, versionId, renditionId);

        // TODO: test validations
    }
    /**
     * Get version information
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version information for **versionId** of file node **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        VersionEntry response = api.getVersion(nodeId, versionId);

        // TODO: test validations
    }
    /**
     * Get version content
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version content for **versionId** of file node **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionContentTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        String range = null;
        File response = api.getVersionContent(nodeId, versionId, attachment, ifModifiedSince, range);

        // TODO: test validations
    }
    /**
     * Get rendition information for a file version
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionRenditionTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        String renditionId = null;
        RenditionEntry response = api.getVersionRendition(nodeId, versionId, renditionId);

        // TODO: test validations
    }
    /**
     * Get rendition content for a file version
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionRenditionContentTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        String renditionId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        String range = null;
        Boolean placeholder = null;
        File response = api.getVersionRenditionContent(nodeId, versionId, renditionId, attachment, ifModifiedSince, range, placeholder);

        // TODO: test validations
    }
    /**
     * List version history
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the version history as an ordered list of versions for the specified **nodeId**.  The list is ordered in descending modified order. So the most recent version is first and the original version is last in the list. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listVersionHistoryTest() throws Exception {
        String nodeId = null;
        List<String> include = null;
        List<String> fields = null;
        Integer skipCount = null;
        Integer maxItems = null;
        VersionPaging response = api.listVersionHistory(nodeId, include, fields, skipCount, maxItems);

        // TODO: test validations
    }
    /**
     * List renditions for a file version
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.  EachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#x27;CREATED&#x27;) &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listVersionRenditionsTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        String where = null;
        RenditionPaging response = api.listVersionRenditions(nodeId, versionId, where);

        // TODO: test validations
    }
    /**
     * Generate a direct access content URL
     *
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestVersionDirectAccessUrlTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        DirectAccessUrlBodyCreate body = null;
        DirectAccessUrlEntry response = api.requestVersionDirectAccessUrl(nodeId, versionId, body);

        // TODO: test validations
    }
    /**
     * Generate a direct access content URL
     *
     * **Note:** this endpoint is available in Alfresco 7.2 and newer versions. Generate a direct access content url for the given **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestVersionRenditionDirectAccessUrlTest() throws Exception {
        String nodeId = null;
        String versionId = null;
        String renditionId = null;
        DirectAccessUrlBodyCreate body = null;
        DirectAccessUrlEntry response = api.requestVersionRenditionDirectAccessUrl(nodeId, versionId, renditionId, body);

        // TODO: test validations
    }
    /**
     * Revert a version
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to revert the version identified by **versionId** and **nodeId** to the live node.  If the node is successfully reverted then the content and metadata for that versioned node will be promoted to the live node and a new version will appear in the version history. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void revertVersionTest() throws Exception {
        RevertBody body = null;
        String nodeId = null;
        String versionId = null;
        List<String> fields = null;
        VersionEntry response = api.revertVersion(body, nodeId, versionId, fields);

        // TODO: test validations
    }
}
