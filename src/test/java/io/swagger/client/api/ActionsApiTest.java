/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ActionBodyExec;
import io.swagger.client.model.ActionDefinitionEntry;
import io.swagger.client.model.ActionDefinitionList;
import io.swagger.client.model.ActionExecResultEntry;
import io.swagger.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ActionsApi
 */
@Ignore
public class ActionsApiTest {

    private final ActionsApi api = new ActionsApi();

    /**
     * Retrieve the details of an action definition
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Retrieve the details of the action denoted by **actionDefinitionId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void actionDetailsTest() throws Exception {
        String actionDefinitionId = null;
        ActionDefinitionEntry response = api.actionDetails(actionDefinitionId);

        // TODO: test validations
    }
    /**
     * Execute an action
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Executes an action  An action may be executed against a node specified by **targetId**. For example:  &#x60;&#x60;&#x60; {   \&quot;actionDefinitionId\&quot;: \&quot;copy\&quot;,   \&quot;targetId\&quot;: \&quot;4c4b3c43-f18b-43ff-af84-751f16f1ddfd\&quot;,   \&quot;params\&quot;: {     \&quot;destination-folder\&quot;: \&quot;34219f79-66fa-4ebf-b371-118598af898c\&quot;   } } &#x60;&#x60;&#x60;  Performing a POST with the request body shown above will result in the node identified by &#x60;&#x60;&#x60;targetId&#x60;&#x60;&#x60; being copied to the destination folder specified in the &#x60;&#x60;&#x60;params&#x60;&#x60;&#x60; object by the key &#x60;&#x60;&#x60;destination-folder&#x60;&#x60;&#x60;.  **targetId** is optional, however, currently **targetId** must be a valid node ID. In the future, actions may be executed against different entity types or executed without the need for the context of an entity.   Parameters supplied to the action within the &#x60;&#x60;&#x60;params&#x60;&#x60;&#x60; object will be converted to the expected type, where possible using the DefaultTypeConverter class. In addition:  * Node IDs may be supplied in their short form (implicit workspace://SpacesStore prefix) * Aspect names may be supplied using their short form, e.g. cm:versionable or cm:auditable  In this example, we add the aspect &#x60;&#x60;&#x60;cm:versionable&#x60;&#x60;&#x60; to a node using the QName resolution mentioned above:  &#x60;&#x60;&#x60; {   \&quot;actionDefinitionId\&quot;: \&quot;add-features\&quot;,   \&quot;targetId\&quot;: \&quot;16349e3f-2977-44d1-93f2-73c12b8083b5\&quot;,   \&quot;params\&quot;: {     \&quot;aspect-name\&quot;: \&quot;cm:versionable\&quot;   } } &#x60;&#x60;&#x60;  The &#x60;&#x60;&#x60;actionDefinitionId&#x60;&#x60;&#x60; is the &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; of an action definition as returned by the _list actions_ operations (e.g. GET /action-definitions).  The action will be executed **asynchronously** with a &#x60;202&#x60; HTTP response signifying that the request has been accepted successfully. The response body contains the unique ID of the action pending execution. The ID may be used, for example to correlate an execution with output in the server logs. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void actionExecTest() throws Exception {
        ActionBodyExec body = null;
        ActionExecResultEntry response = api.actionExec(body);

        // TODO: test validations
    }
    /**
     * Retrieve list of available actions
     *
     * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets a list of all available actions  The default sort order for the returned list is for actions to be sorted by ascending name. You can override the default by using the **orderBy** parameter.  You can use any of the following fields to order the results: * name * title 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listActionsTest() throws Exception {
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> fields = null;
        ActionDefinitionList response = api.listActions(skipCount, maxItems, orderBy, fields);

        // TODO: test validations
    }
    /**
     * Retrieve actions for a node
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Retrieve the list of actions that may be executed against the given **nodeId**.  The default sort order for the returned list is for actions to be sorted by ascending name. You can override the default by using the **orderBy** parameter.  You can use any of the following fields to order the results: * name * title 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void nodeActionsTest() throws Exception {
        String nodeId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> fields = null;
        ActionDefinitionList response = api.nodeActions(nodeId, skipCount, maxItems, orderBy, fields);

        // TODO: test validations
    }
}
