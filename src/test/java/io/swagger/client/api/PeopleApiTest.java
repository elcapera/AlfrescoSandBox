/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ClientBody;
import io.swagger.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.PasswordResetBody;
import io.swagger.client.model.PersonBodyCreate;
import io.swagger.client.model.PersonBodyUpdate;
import io.swagger.client.model.PersonEntry;
import io.swagger.client.model.PersonPaging;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PeopleApi
 */
@Ignore
public class PeopleApiTest {

    private final PeopleApi api = new PeopleApi();

    /**
     * Create person
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a person.  If applicable, the given person&#x27;s login access can also be optionally disabled.  You must have admin rights to create a person.  You can set custom properties when you create a person: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;: \&quot;abeecher\&quot;,   \&quot;firstName\&quot;: \&quot;Alice\&quot;,   \&quot;lastName\&quot;: \&quot;Beecher\&quot;,   \&quot;displayName\&quot;: \&quot;Alice Beecher\&quot;,   \&quot;email\&quot;: \&quot;abeecher@example.com\&quot;,   \&quot;password\&quot;: \&quot;secret\&quot;,   \&quot;properties\&quot;:   {     \&quot;my:property\&quot;: \&quot;The value\&quot;   } } &#x60;&#x60;&#x60; **Note:** setting properties of type d:content and d:category are not supported. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPersonTest() throws Exception {
        PersonBodyCreate body = null;
        List<String> fields = null;
        PersonEntry response = api.createPerson(body, fields);

        // TODO: test validations
    }
    /**
     * Delete avatar image
     *
     * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Deletes the avatar image related to person **personId**.  You must be the person or have admin rights to update a person&#x27;s avatar.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAvatarImageTest() throws Exception {
        String personId = null;
        api.deleteAvatarImage(personId);

        // TODO: test validations
    }
    /**
     * Get avatar image
     *
     * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets the avatar image related to the person **personId**. If the person has no related avatar then the **placeholder** query parameter can be optionally used to request a placeholder image to be returned.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAvatarImageTest() throws Exception {
        String personId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        Boolean placeholder = null;
        File response = api.getAvatarImage(personId, attachment, ifModifiedSince, placeholder);

        // TODO: test validations
    }
    /**
     * Get a person
     *
     * Gets information for the person **personId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPersonTest() throws Exception {
        String personId = null;
        List<String> fields = null;
        PersonEntry response = api.getPerson(personId, fields);

        // TODO: test validations
    }
    /**
     * List people
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  List people.  You can use the **include** parameter to return any additional information.  The default sort order for the returned list is for people to be sorted by ascending id. You can override the default by using the **orderBy** parameter.  You can use any of the following fields to order the results: * id * firstName * lastName 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listPeopleTest() throws Exception {
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> include = null;
        List<String> fields = null;
        PersonPaging response = api.listPeople(skipCount, maxItems, orderBy, include, fields);

        // TODO: test validations
    }
    /**
     * Request password reset
     *
     * **Note:** this endpoint is deprecated as of Alfresco 7.1, and will be removed in the future.  Initiates the reset password workflow to send an email with reset password instruction to the user&#x27;s registered email.  The client is mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {   \&quot;client\&quot;: \&quot;myClient\&quot; } &#x60;&#x60;&#x60; **Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box share is registered as a default client, so you could pass **share** as the client name: &#x60;&#x60;&#x60;JSON {   \&quot;client\&quot;: \&quot;share\&quot; } &#x60;&#x60;&#x60; **Note:** No authentication is required to call this endpoint. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws Exception {
        ClientBody body = null;
        String personId = null;
        api.requestPasswordReset(body, personId);

        // TODO: test validations
    }
    /**
     * Reset password
     *
     * **Note:** this endpoint is deprecated as of Alfresco 7.1, and will be removed in the future. Resets user&#x27;s password  The password, id and key properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {   \&quot;password\&quot;:\&quot;newPassword\&quot;,   \&quot;id\&quot;:\&quot;activiti$10\&quot;,   \&quot;key\&quot;:\&quot;4dad6d00-0daf-413a-b200-f64af4e12345\&quot; } &#x60;&#x60;&#x60; **Note:** No authentication is required to call this endpoint. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws Exception {
        PasswordResetBody body = null;
        String personId = null;
        api.resetPassword(body, personId);

        // TODO: test validations
    }
    /**
     * Update avatar image
     *
     * **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Updates the avatar image related to the person **personId**.  The request body should be the binary stream for the avatar image. The content type of the file should be an image file. This will be used to generate an \&quot;avatar\&quot; thumbnail rendition.  You must be the person or have admin rights to update a person&#x27;s avatar.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAvatarImageTest() throws Exception {
        Object body = null;
        String personId = null;
        api.updateAvatarImage(body, personId);

        // TODO: test validations
    }
    /**
     * Update person
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the given person&#x27;s details.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user.  If applicable, the given person&#x27;s login access can also be optionally disabled or re-enabled.  You must have admin rights to update a person â€” unless updating your own details.  If you are changing your password, as a non-admin user, then the existing password must also be supplied (using the oldPassword field in addition to the new password value).  Admin users cannot be disabled by setting enabled to false.  Non-admin users may not disable themselves.  You can set custom properties when you update a person: &#x60;&#x60;&#x60;JSON {   \&quot;firstName\&quot;: \&quot;Alice\&quot;,   \&quot;properties\&quot;:   {     \&quot;my:property\&quot;: \&quot;The value\&quot;   } } &#x60;&#x60;&#x60; **Note:** setting properties of type d:content and d:category are not supported. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePersonTest() throws Exception {
        PersonBodyUpdate body = null;
        String personId = null;
        List<String> fields = null;
        PersonEntry response = api.updatePerson(body, personId, fields);

        // TODO: test validations
    }
}
