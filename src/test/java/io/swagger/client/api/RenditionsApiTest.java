/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.DirectAccessUrlBodyCreate;
import io.swagger.client.model.DirectAccessUrlEntry;
import io.swagger.client.model.Error;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RenditionBodyCreate;
import io.swagger.client.model.RenditionEntry;
import io.swagger.client.model.RenditionPaging;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RenditionsApi
 */
@Ignore
public class RenditionsApiTest {

    private final RenditionsApi api = new RenditionsApi();

    /**
     * Create rendition
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: &#x60;&#x60;&#x60;JSON {   \&quot;id\&quot;:\&quot;doclib\&quot; } &#x60;&#x60;&#x60;  Multiple names may be specified as a comma separated list or using a list format: &#x60;&#x60;&#x60;JSON [   {      \&quot;id\&quot;: \&quot;doclib\&quot;   },   {      \&quot;id\&quot;: \&quot;avatar\&quot;   } ] &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRenditionTest() throws Exception {
        RenditionBodyCreate body = null;
        String nodeId = null;
        api.createRendition(body, nodeId);

        // TODO: test validations
    }
    /**
     * Delete rendition
     *
     * **Note:** this endpoint is available in Alfresco 7.1.1 and newer versions.  Delete the rendition identified by **renditionId** of **nodeId**.  If the rendition is successfully deleted then the content for that rendition node will be cleared. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRenditionTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        api.deleteRendition(nodeId, renditionId);

        // TODO: test validations
    }
    /**
     * Get rendition information
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRenditionTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        RenditionEntry response = api.getRendition(nodeId, renditionId);

        // TODO: test validations
    }
    /**
     * Get rendition content
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRenditionContentTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        Boolean attachment = null;
        OffsetDateTime ifModifiedSince = null;
        String range = null;
        Boolean placeholder = null;
        File response = api.getRenditionContent(nodeId, renditionId, attachment, ifModifiedSince, range, placeholder);

        // TODO: test validations
    }
    /**
     * List renditions
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  EachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  &#x60;&#x60;&#x60; (status&#x3D;&#x27;CREATED&#x27;) &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listRenditionsTest() throws Exception {
        String nodeId = null;
        String where = null;
        RenditionPaging response = api.listRenditions(nodeId, where);

        // TODO: test validations
    }
    /**
     * Generate a direct access content URL
     *
     * **Note:** this endpoint is available in Alfresco 7.1 and newer versions. Generate a direct access content url for the given **nodeId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestRenditionDirectAccessUrlTest() throws Exception {
        String nodeId = null;
        String renditionId = null;
        DirectAccessUrlBodyCreate body = null;
        DirectAccessUrlEntry response = api.requestRenditionDirectAccessUrl(nodeId, renditionId, body);

        // TODO: test validations
    }
}
