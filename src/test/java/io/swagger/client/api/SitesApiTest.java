/*
 * Alfresco Content Services REST API
 * **Core API**  Provides access to the core features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.SiteBodyCreate;
import io.swagger.client.model.SiteBodyUpdate;
import io.swagger.client.model.SiteContainerEntry;
import io.swagger.client.model.SiteContainerPaging;
import io.swagger.client.model.SiteEntry;
import io.swagger.client.model.SiteGroupEntry;
import io.swagger.client.model.SiteGroupPaging;
import io.swagger.client.model.SiteMemberEntry;
import io.swagger.client.model.SiteMemberPaging;
import io.swagger.client.model.SiteMembershipApprovalBody;
import io.swagger.client.model.SiteMembershipBodyCreate;
import io.swagger.client.model.SiteMembershipBodyUpdate;
import io.swagger.client.model.SiteMembershipRejectionBody;
import io.swagger.client.model.SiteMembershipRequestBodyCreate;
import io.swagger.client.model.SiteMembershipRequestBodyUpdate;
import io.swagger.client.model.SiteMembershipRequestEntry;
import io.swagger.client.model.SiteMembershipRequestPaging;
import io.swagger.client.model.SiteMembershipRequestWithPersonPaging;
import io.swagger.client.model.SitePaging;
import io.swagger.client.model.SiteRoleEntry;
import io.swagger.client.model.SiteRolePaging;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for SitesApi
 */
@Ignore
public class SitesApiTest {

    private final SitesApi api = new SitesApi();

    /**
     * Approve a site membership request
     *
     * Approve a site membership request. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void approveSiteMembershipRequestTest() throws Exception {
        String siteId = null;
        String inviteeId = null;
        SiteMembershipApprovalBody body = null;
        api.approveSiteMembershipRequest(siteId, inviteeId, body);

        // TODO: test validations
    }
    /**
     * Create a site
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Creates a default site with the given details.  Unless explicitly specified, the site id will be generated from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.  Note: the id of a site cannot be updated once the site has been created.  For example, to create a public site called \&quot;Marketing\&quot; the following body could be used: &#x60;&#x60;&#x60;JSON {   \&quot;title\&quot;: \&quot;Marketing\&quot;,   \&quot;visibility\&quot;: \&quot;PUBLIC\&quot; } &#x60;&#x60;&#x60;  The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.  **Note:** if skipped then such a site will **not** work within Share.  The addition of the site to the user&#x27;s site favorites can be skipped via the **skipAddToFavorites** query parameter.  The creator will be added as a member with Site Manager role.  When you create a site, a container called **documentLibrary** is created for you in the new site. This container is the root folder for content stored in the site. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteTest() throws Exception {
        SiteBodyCreate body = null;
        Boolean skipConfiguration = null;
        Boolean skipAddToFavorites = null;
        List<String> fields = null;
        SiteEntry response = api.createSite(body, skipConfiguration, skipAddToFavorites, fields);

        // TODO: test validations
    }
    /**
     * Create a site membership for group
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Creates a site membership for group **groupId** on site **siteId**. You can set the **role** to one of four types: * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager **Note:** You can create more than one site membership by specifying a list of group in the JSON body like this:  &#x60;&#x60;&#x60;JSON   [    {      \&quot;role\&quot;: \&quot;SiteConsumer\&quot;,      \&quot;id\&quot;: \&quot;authorityId\&quot;    },    {      \&quot;role\&quot;: \&quot;SiteConsumer\&quot;,      \&quot;id\&quot;: \&quot;authorityId\&quot;    }   ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example: &#x60;&#x60;&#x60;JSON   {     \&quot;list\&quot;: {       \&quot;pagination\&quot;: {         \&quot;count\&quot;: 2,         \&quot;hasMoreItems\&quot;: false,         \&quot;totalItems\&quot;: 2,         \&quot;skipCount\&quot;: 0,         \&quot;maxItems\&quot;: 100       },       \&quot;entries\&quot;: [         {           \&quot;entry\&quot;: {             ...           }         },         {           \&quot;entry\&quot;: {             ...           }         }       ]     }   } &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteGroupMembershipTest() throws Exception {
        SiteMembershipBodyCreate body = null;
        String siteId = null;
        List<String> fields = null;
        SiteGroupEntry response = api.createSiteGroupMembership(body, siteId, fields);

        // TODO: test validations
    }
    /**
     * Create a site membership
     *
     * Creates a site membership for person **personId** on site **siteId**.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager  **Note:** You can create more than one site membership by specifying a list of people in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;role\&quot;: \&quot;SiteConsumer\&quot;,     \&quot;id\&quot;: \&quot;joe\&quot;   },   {     \&quot;role\&quot;: \&quot;SiteConsumer\&quot;,     \&quot;id\&quot;: \&quot;fred\&quot;   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {           ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteMembershipTest() throws Exception {
        SiteMembershipBodyCreate body = null;
        String siteId = null;
        List<String> fields = null;
        SiteMemberEntry response = api.createSiteMembership(body, siteId, fields);

        // TODO: test validations
    }
    /**
     * Create a site membership request
     *
     * Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body. The result of the request differs depending on the type of site.  * For a **public** site, you join the site immediately as a SiteConsumer. * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager. * You cannot request membership of a **private** site. Members are invited by the site administrator.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user.   **Note:** You can create site membership requests for more than one site by specifying a list of sites in the JSON body like this:  &#x60;&#x60;&#x60;JSON [   {     \&quot;message\&quot;: \&quot;Please can you add me\&quot;,     \&quot;id\&quot;: \&quot;test-site-1\&quot;,     \&quot;title\&quot;: \&quot;Request for test site 1\&quot;,   },   {     \&quot;message\&quot;: \&quot;Please can you add me\&quot;,     \&quot;id\&quot;: \&quot;test-site-2\&quot;,     \&quot;title\&quot;: \&quot;Request for test site 2\&quot;,   } ] &#x60;&#x60;&#x60; If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  &#x60;&#x60;&#x60;JSON {   \&quot;list\&quot;: {     \&quot;pagination\&quot;: {       \&quot;count\&quot;: 2,       \&quot;hasMoreItems\&quot;: false,       \&quot;totalItems\&quot;: 2,       \&quot;skipCount\&quot;: 0,       \&quot;maxItems\&quot;: 100     },     \&quot;entries\&quot;: [       {         \&quot;entry\&quot;: {           ...         }       },       {         \&quot;entry\&quot;: {           ...         }       }     ]   } } &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSiteMembershipRequestForPersonTest() throws Exception {
        SiteMembershipRequestBodyCreate body = null;
        String personId = null;
        List<String> fields = null;
        SiteMembershipRequestEntry response = api.createSiteMembershipRequestForPerson(body, personId, fields);

        // TODO: test validations
    }
    /**
     * Delete a site
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the site with **siteId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteTest() throws Exception {
        String siteId = null;
        Boolean permanent = null;
        api.deleteSite(siteId, permanent);

        // TODO: test validations
    }
    /**
     * Delete a group membership for site
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Deletes group **groupId** as a member of site **siteId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteGroupMembershipTest() throws Exception {
        String siteId = null;
        String groupId = null;
        api.deleteSiteGroupMembership(siteId, groupId);

        // TODO: test validations
    }
    /**
     * Delete a site membership
     *
     * Deletes person **personId** as a member of site **siteId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteMembershipTest() throws Exception {
        String siteId = null;
        String personId = null;
        api.deleteSiteMembership(siteId, personId);

        // TODO: test validations
    }
    /**
     * Delete a site membership
     *
     * Deletes person **personId** as a member of site **siteId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteMembershipForPersonTest() throws Exception {
        String personId = null;
        String siteId = null;
        api.deleteSiteMembershipForPerson(personId, siteId);

        // TODO: test validations
    }
    /**
     * Delete a site membership request
     *
     * Deletes the site membership request to site **siteId** for person **personId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSiteMembershipRequestForPersonTest() throws Exception {
        String personId = null;
        String siteId = null;
        api.deleteSiteMembershipRequestForPerson(personId, siteId);

        // TODO: test validations
    }
    /**
     * Get a site
     *
     * Gets information for site **siteId**.  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to the site **siteId**:  &#x60;&#x60;&#x60; containers,members &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteTest() throws Exception {
        String siteId = null;
        List<String> relations = null;
        List<String> fields = null;
        SiteEntry response = api.getSite(siteId, relations, fields);

        // TODO: test validations
    }
    /**
     * Get a site container
     *
     * Gets information on the container **containerId** in site **siteId**.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteContainerTest() throws Exception {
        String siteId = null;
        String containerId = null;
        List<String> fields = null;
        SiteContainerEntry response = api.getSiteContainer(siteId, containerId, fields);

        // TODO: test validations
    }
    /**
     * Get information about site membership of group
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets site membership information for group **groupId** on site **siteId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteGroupMembershipTest() throws Exception {
        String siteId = null;
        String groupId = null;
        List<String> fields = null;
        SiteGroupEntry response = api.getSiteGroupMembership(siteId, groupId, fields);

        // TODO: test validations
    }
    /**
     * Get a site membership
     *
     * Gets site membership information for person **personId** on site **siteId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteMembershipTest() throws Exception {
        String siteId = null;
        String personId = null;
        List<String> fields = null;
        SiteMemberEntry response = api.getSiteMembership(siteId, personId, fields);

        // TODO: test validations
    }
    /**
     * Get a site membership
     *
     * Gets site membership information for person **personId** on site **siteId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteMembershipForPersonTest() throws Exception {
        String personId = null;
        String siteId = null;
        SiteRoleEntry response = api.getSiteMembershipForPerson(personId, siteId);

        // TODO: test validations
    }
    /**
     * Get a site membership request
     *
     * Gets the site membership request for site **siteId** for person **personId**, if one exists.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteMembershipRequestForPersonTest() throws Exception {
        String personId = null;
        String siteId = null;
        List<String> fields = null;
        SiteMembershipRequestEntry response = api.getSiteMembershipRequestForPerson(personId, siteId, fields);

        // TODO: test validations
    }
    /**
     * Get site membership requests
     *
     * Get the list of site membership requests the user can action.  You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:  &#x60;&#x60;&#x60; (siteId&#x3D;mySite) &#x60;&#x60;&#x60;  The **where** parameter can also be used to filter by ***personId***. For example:  &#x60;&#x60;&#x60; where&#x3D;(personId&#x3D;person) &#x60;&#x60;&#x60;  This may be combined with the siteId filter, as shown below:  &#x60;&#x60;&#x60; where&#x3D;(siteId&#x3D;mySite AND personId&#x3D;person) &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSiteMembershipRequestsTest() throws Exception {
        Integer skipCount = null;
        Integer maxItems = null;
        String where = null;
        List<String> fields = null;
        SiteMembershipRequestWithPersonPaging response = api.getSiteMembershipRequests(skipCount, maxItems, where, fields);

        // TODO: test validations
    }
    /**
     * List site containers
     *
     * Gets a list of containers for the site **siteId**.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSiteContainersTest() throws Exception {
        String siteId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        SiteContainerPaging response = api.listSiteContainers(siteId, skipCount, maxItems, fields);

        // TODO: test validations
    }
    /**
     * List group membership for site
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Gets a list of group membership for site **siteId**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSiteGroupsTest() throws Exception {
        String siteId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        SiteGroupPaging response = api.listSiteGroups(siteId, skipCount, maxItems, fields);

        // TODO: test validations
    }
    /**
     * List site membership requests
     *
     * Gets a list of the current site membership requests for person **personId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSiteMembershipRequestsForPersonTest() throws Exception {
        String personId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        SiteMembershipRequestPaging response = api.listSiteMembershipRequestsForPerson(personId, skipCount, maxItems, fields);

        // TODO: test validations
    }
    /**
     * List site memberships
     *
     * Gets a list of site memberships for site **siteId**.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSiteMembershipsTest() throws Exception {
        String siteId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> fields = null;
        String where = null;
        SiteMemberPaging response = api.listSiteMemberships(siteId, skipCount, maxItems, fields, where);

        // TODO: test validations
    }
    /**
     * List site memberships
     *
     * Gets a list of site membership information for person **personId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  &#x60;&#x60;&#x60; (visibility&#x3D;&#x27;PRIVATE&#x27;) (visibility&#x3D;&#x27;PUBLIC&#x27;) (visibility&#x3D;&#x27;MODERATED&#x27;) &#x60;&#x60;&#x60;  Example to filter by site **preset**:  &#x60;&#x60;&#x60; (preset&#x3D;&#x27;site-dashboard&#x27;) &#x60;&#x60;&#x60;  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * role 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSiteMembershipsForPersonTest() throws Exception {
        String personId = null;
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> relations = null;
        List<String> fields = null;
        String where = null;
        SiteRolePaging response = api.listSiteMembershipsForPerson(personId, skipCount, maxItems, orderBy, relations, fields, where);

        // TODO: test validations
    }
    /**
     * List sites
     *
     * Gets a list of sites in this repository.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  &#x60;&#x60;&#x60; (visibility&#x3D;&#x27;PRIVATE&#x27;) (visibility&#x3D;&#x27;PUBLIC&#x27;) (visibility&#x3D;&#x27;MODERATED&#x27;) &#x60;&#x60;&#x60;  Example to filter by site **preset**:  &#x60;&#x60;&#x60; (preset&#x3D;&#x27;site-dashboard&#x27;) &#x60;&#x60;&#x60;  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * description  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to each site:  &#x60;&#x60;&#x60; containers,members &#x60;&#x60;&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSitesTest() throws Exception {
        Integer skipCount = null;
        Integer maxItems = null;
        List<String> orderBy = null;
        List<String> relations = null;
        List<String> fields = null;
        String where = null;
        SitePaging response = api.listSites(skipCount, maxItems, orderBy, relations, fields, where);

        // TODO: test validations
    }
    /**
     * Reject a site membership request
     *
     * Reject a site membership request. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rejectSiteMembershipRequestTest() throws Exception {
        String siteId = null;
        String inviteeId = null;
        SiteMembershipRejectionBody body = null;
        api.rejectSiteMembershipRequest(siteId, inviteeId, body);

        // TODO: test validations
    }
    /**
     * Update a site
     *
     * **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the details for the given site **siteId**. Site Manager or otherwise a (site) admin can update title, description or visibility.  Note: the id of a site cannot be updated once the site has been created. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteTest() throws Exception {
        SiteBodyUpdate body = null;
        String siteId = null;
        List<String> fields = null;
        SiteEntry response = api.updateSite(body, siteId, fields);

        // TODO: test validations
    }
    /**
     * Update site membership of group
     *
     * **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.  Update the membership of person **groupId** in site **siteId**. You can set the **role** to one of four types: * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteGroupMembershipTest() throws Exception {
        SiteMembershipBodyUpdate body = null;
        String siteId = null;
        String groupId = null;
        List<String> fields = null;
        SiteGroupEntry response = api.updateSiteGroupMembership(body, siteId, groupId, fields);

        // TODO: test validations
    }
    /**
     * Update a site membership
     *
     * Update the membership of person **personId** in site **siteId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteMembershipTest() throws Exception {
        SiteMembershipBodyUpdate body = null;
        String siteId = null;
        String personId = null;
        List<String> fields = null;
        SiteMemberEntry response = api.updateSiteMembership(body, siteId, personId, fields);

        // TODO: test validations
    }
    /**
     * Update a site membership request
     *
     * Updates the message for the site membership request to site **siteId** for person **personId**.  You can use the &#x60;-me-&#x60; string in place of &#x60;&lt;personId&gt;&#x60; to specify the currently authenticated user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSiteMembershipRequestForPersonTest() throws Exception {
        SiteMembershipRequestBodyUpdate body = null;
        String personId = null;
        String siteId = null;
        List<String> fields = null;
        SiteMembershipRequestEntry response = api.updateSiteMembershipRequestForPerson(body, personId, siteId, fields);

        // TODO: test validations
    }
}
